webpackJsonp([13,131],{27:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(a,"__esModule",{value:!0});var p=s(66),o=t(p),e=s(65),c=t(e);o["default"].Group=c["default"],a["default"]=o["default"],n.exports=a["default"]},50:function(n,a,s){"use strict";s(11),s(89)},65:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(a,"__esModule",{value:!0});var p=s(8),o=t(p),e=s(1),c=t(e),u=s(6),l=t(u),k=function(n){var a,s=n.prefixCls,t=void 0===s?"ant-input-group":s,p=n.className,e=void 0===p?"":p,u=(0,l["default"])((a={},(0,o["default"])(a,t,!0),(0,o["default"])(a,t+"-lg","large"===n.size),(0,o["default"])(a,t+"-sm","small"===n.size),(0,o["default"])(a,e,!!e),a));return c["default"].createElement("span",{className:u,style:n.style},n.children)};k.propTypes={children:c["default"].PropTypes.any},a["default"]=k,n.exports=a["default"]},66:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}function p(n){return"undefined"==typeof n||null===n?"":n}function o(n){return window.requestAnimationFrame?window.requestAnimationFrame(n):window.setTimeout(n,1)}function e(n){window.cancelAnimationFrame?window.cancelAnimationFrame(n):window.clearTimeout(n)}Object.defineProperty(a,"__esModule",{value:!0}),a["default"]=void 0;var c=s(7),u=t(c),l=s(8),k=t(l),i=s(3),r=t(i),d=s(5),y=t(d),f=s(4),g=t(f),h=s(1),m=t(h),w=s(6),v=t(w),x=s(67),b=t(x),K=s(9),N=t(K),T=s(23),E=t(T),S=function(n){function a(s){(0,r["default"])(this,a);var t=(0,y["default"])(this,n.call(this,s));return t.handleKeyDown=function(n){var a=t.props,s=a.onPressEnter,p=a.onKeyDown;13===n.keyCode&&s&&s(n),p&&p(n)},t.handleTextareaChange=function(n){"value"in t.props||t.resizeTextarea();var a=t.props.onChange;a&&a(n)},t.resizeTextarea=function(){var n=t.props,a=n.type,s=n.autosize;if("textarea"===a&&s&&t.refs.input){var p=s?s.minRows:null,o=s?s.maxRows:null,e=(0,b["default"])(t.refs.input,!1,p,o);t.setState({textareaStyles:e})}},t.state={textareaStyles:null},t}return(0,g["default"])(a,n),a.prototype.componentDidMount=function(){this.resizeTextarea()},a.prototype.componentWillReceiveProps=function(n){this.props.value!==n.value&&(this.nextFrameActionId&&e(this.nextFrameActionId),this.nextFrameActionId=o(this.resizeTextarea))},a.prototype.renderLabledInput=function(n){var a,s=this.props,t=s.prefixCls+"-group",p=t+"-addon",o=s.addonBefore?m["default"].createElement("span",{className:p},s.addonBefore):null,e=s.addonAfter?m["default"].createElement("span",{className:p},s.addonAfter):null,c=(0,v["default"])((a={},(0,k["default"])(a,s.prefixCls+"-wrapper",!0),(0,k["default"])(a,t,o||e),a));return m["default"].createElement("span",{className:c},o,n,e)},a.prototype.renderInput=function(){var n,a=(0,N["default"])({},this.props),s=(0,E["default"])(this.props,["prefixCls","onPressEnter","autosize","addonBefore","addonAfter"]),t=a.prefixCls;if(!a.type)return a.children;var o=(0,v["default"])((n={},(0,k["default"])(n,t,!0),(0,k["default"])(n,t+"-sm","small"===a.size),(0,k["default"])(n,t+"-lg","large"===a.size),(0,k["default"])(n,a.className,!!a.className),n));switch("value"in a&&(s.value=p(a.value),delete s.defaultValue),a.type){case"textarea":return m["default"].createElement("textarea",(0,u["default"])({},s,{style:(0,N["default"])({},a.style,this.state.textareaStyles),className:o,onKeyDown:this.handleKeyDown,onChange:this.handleTextareaChange,ref:"input"}));default:return m["default"].createElement("input",(0,u["default"])({},s,{className:o,onKeyDown:this.handleKeyDown,ref:"input"}))}},a.prototype.render=function(){return this.renderLabledInput(this.renderInput())},a}(h.Component);a["default"]=S,S.defaultProps={disabled:!1,prefixCls:"ant-input",type:"text",autosize:!1},S.propTypes={type:h.PropTypes.string,id:h.PropTypes.oneOfType([h.PropTypes.string,h.PropTypes.number]),size:h.PropTypes.oneOf(["small","default","large"]),disabled:h.PropTypes.bool,value:h.PropTypes.any,defaultValue:h.PropTypes.any,className:h.PropTypes.string,addonBefore:h.PropTypes.node,addonAfter:h.PropTypes.node,prefixCls:h.PropTypes.string,autosize:h.PropTypes.oneOfType([h.PropTypes.bool,h.PropTypes.object]),onPressEnter:h.PropTypes.func,onKeyDown:h.PropTypes.func},n.exports=a["default"]},67:function(n,a){"use strict";function s(n){var a=arguments.length>1&&void 0!==arguments[1]&&arguments[1],s=n.getAttribute("id")||n.getAttribute("data-reactid")||n.getAttribute("name");if(a&&e[s])return e[s];var t=window.getComputedStyle(n),p=t.getPropertyValue("box-sizing")||t.getPropertyValue("-moz-box-sizing")||t.getPropertyValue("-webkit-box-sizing"),c=parseFloat(t.getPropertyValue("padding-bottom"))+parseFloat(t.getPropertyValue("padding-top")),u=parseFloat(t.getPropertyValue("border-bottom-width"))+parseFloat(t.getPropertyValue("border-top-width")),l=o.map(function(n){return n+":"+t.getPropertyValue(n)}).join(";"),k={sizingStyle:l,paddingSize:c,borderSize:u,boxSizing:p};return a&&s&&(e[s]=k),k}function t(n){var a=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;c||(c=document.createElement("textarea"),document.body.appendChild(c));var e=s(n,a),u=e.paddingSize,l=e.borderSize,k=e.boxSizing,i=e.sizingStyle;c.setAttribute("style",i+";"+p),c.value=n.value||n.placeholder||"";var r=-(1/0),d=1/0,y=c.scrollHeight;if("border-box"===k?y+=l:"content-box"===k&&(y-=u),null!==t||null!==o){c.value="";var f=c.scrollHeight-u;null!==t&&(r=f*t,"border-box"===k&&(r=r+u+l),y=Math.max(r,y)),null!==o&&(d=f*o,"border-box"===k&&(d=d+u+l),y=Math.min(d,y))}return{height:y,minHeight:r,maxHeight:d}}Object.defineProperty(a,"__esModule",{value:!0}),a["default"]=t;var p="\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n",o=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing"],e={},c=void 0;n.exports=a["default"]},89:function(n,a){},251:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(a,"__esModule",{value:!0}),a["default"]=a.AntTreeNode=void 0;var p=s(7),o=t(p),e=s(3),c=t(e),u=s(5),l=t(u),k=s(4),i=t(k),r=s(1),d=t(r),y=s(472),f=t(y),g=s(503),h=t(g),m=(a.AntTreeNode=function(n){function a(){return(0,c["default"])(this,a),(0,l["default"])(this,n.apply(this,arguments))}return(0,i["default"])(a,n),a.prototype.render=function(){return d["default"].createElement(a,this.props)},a}(d["default"].Component),function(n){function a(){return(0,c["default"])(this,a),(0,l["default"])(this,n.apply(this,arguments))}return(0,i["default"])(a,n),a.prototype.render=function(){var n=this.props,a=n.checkable;return d["default"].createElement(f["default"],(0,o["default"])({},n,{checkable:a?d["default"].createElement("span",{className:n.prefixCls+"-checkbox-inner"}):a}),this.props.children)},a}(d["default"].Component));a["default"]=m,m.TreeNode=y.TreeNode,m.defaultProps={prefixCls:"ant-tree",checkable:!1,showIcon:!1,openAnimation:h["default"]}},252:function(n,a,s){"use strict";s(11),s(1607),s(50)},1048:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}var p=(s(252),s(251)),o=t(p),e=s(1),c=t(e),u=s(2);t(u);n.exports={content:{"zh-CN":[["p","\u53d7\u63a7\u64cd\u4f5c\u793a\u4f8b"]],"en-US":[["p","basic controlled example"]]},meta:{order:1,title:{"zh-CN":"\u53d7\u63a7\u64cd\u4f5c\u793a\u4f8b","en-US":"basic controlled example"},filename:"components/tree/demo/basic-controlled.md",id:"components-tree-demo-basic-controlled"},toc:["ul",["li",["a",{href:"#zh-CN"},"zh-CN"]],["li",["a",{href:"#en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Tree <span class="token punctuation" >}</span> <span class="token keyword" >from</span> <span class="token string" >\'antd\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> TreeNode <span class="token operator" >=</span> Tree<span class="token punctuation" >.</span>TreeNode<span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> x <span class="token operator" >=</span> <span class="token number" >3</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> y <span class="token operator" >=</span> <span class="token number" >2</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> z <span class="token operator" >=</span> <span class="token number" >1</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> gData <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> generateData <span class="token operator" >=</span> <span class="token punctuation" >(</span>_level<span class="token punctuation" >,</span> _preKey<span class="token punctuation" >,</span> _tns<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >const</span> preKey <span class="token operator" >=</span> _preKey <span class="token operator" >||</span> <span class="token string" >\'0\'</span><span class="token punctuation" >;</span>\n  <span class="token keyword" >const</span> tns <span class="token operator" >=</span> _tns <span class="token operator" >||</span> gData<span class="token punctuation" >;</span>\n\n  <span class="token keyword" >const</span> children <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n  <span class="token keyword" >for</span> <span class="token punctuation" >(</span><span class="token keyword" >let</span> i <span class="token operator" >=</span> <span class="token number" >0</span><span class="token punctuation" >;</span> i <span class="token operator" >&lt;</span> x<span class="token punctuation" >;</span> i<span class="token operator" >++</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> key <span class="token operator" >=</span> <span class="token template-string" ><span class="token string" >`</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>preKey<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >-</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>i<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n    tns<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> title<span class="token punctuation" >:</span> key<span class="token punctuation" >,</span> key <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >if</span> <span class="token punctuation" >(</span>i <span class="token operator" >&lt;</span> y<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n      children<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span>key<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span>\n  <span class="token punctuation" >}</span>\n  <span class="token keyword" >if</span> <span class="token punctuation" >(</span>_level <span class="token operator" >&lt;</span> <span class="token number" >0</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> tns<span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n  <span class="token keyword" >const</span> level <span class="token operator" >=</span> _level <span class="token operator" >-</span> <span class="token number" >1</span><span class="token punctuation" >;</span>\n  children<span class="token punctuation" >.</span><span class="token function" >forEach</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>key<span class="token punctuation" >,</span> index<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n    tns<span class="token punctuation" >[</span>index<span class="token punctuation" >]</span><span class="token punctuation" >.</span>children <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >return</span> <span class="token function" >generateData</span><span class="token punctuation" >(</span>level<span class="token punctuation" >,</span> key<span class="token punctuation" >,</span> tns<span class="token punctuation" >[</span>index<span class="token punctuation" >]</span><span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n<span class="token function" >generateData</span><span class="token punctuation" >(</span>z<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> Demo <span class="token operator" >=</span> React<span class="token punctuation" >.</span><span class="token function" >createClass</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  <span class="token function" >getInitialState</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >{</span>\n      expandedKeys<span class="token punctuation" >:</span> <span class="token punctuation" >[</span><span class="token string" >\'0-0-0\'</span><span class="token punctuation" >,</span> <span class="token string" >\'0-0-1\'</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      autoExpandParent<span class="token punctuation" >:</span> <span class="token boolean" >true</span><span class="token punctuation" >,</span>\n      checkedKeys<span class="token punctuation" >:</span> <span class="token punctuation" >[</span><span class="token string" >\'0-0-0\'</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      selectedKeys<span class="token punctuation" >:</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onExpand</span><span class="token punctuation" >(</span>expandedKeys<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span><span class="token string" >\'onExpand\'</span><span class="token punctuation" >,</span> arguments<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token comment" spellcheck="true">// if not set autoExpandParent to false, if children expanded, parent can not collapse.</span>\n    <span class="token comment" spellcheck="true">// or, you can remove all expanded children keys.</span>\n    <span class="token keyword" >this</span><span class="token punctuation" >.</span><span class="token function" >setState</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n      expandedKeys<span class="token punctuation" >,</span>\n      autoExpandParent<span class="token punctuation" >:</span> <span class="token boolean" >false</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onCheck</span><span class="token punctuation" >(</span>checkedKeys<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >this</span><span class="token punctuation" >.</span><span class="token function" >setState</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n      checkedKeys<span class="token punctuation" >,</span>\n      selectedKeys<span class="token punctuation" >:</span> <span class="token punctuation" >[</span><span class="token string" >\'0-3\'</span><span class="token punctuation" >,</span> <span class="token string" >\'0-4\'</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onSelect</span><span class="token punctuation" >(</span>selectedKeys<span class="token punctuation" >,</span> info<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span><span class="token string" >\'onSelect\'</span><span class="token punctuation" >,</span> info<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >this</span><span class="token punctuation" >.</span><span class="token function" >setState</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> selectedKeys <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >render</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> loop <span class="token operator" >=</span> data <span class="token operator" >=</span><span class="token operator" >></span> data<span class="token punctuation" >.</span><span class="token function" >map</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >return</span> <span class="token punctuation" >(</span>\n          <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >key</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token attr-name" >disableCheckbox</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key <span class="token operator" >===</span> <span class="token string" >\'0-0-0\'</span><span class="token punctuation" >}</span></span><span class="token punctuation" >></span></span>\n            <span class="token punctuation" >{</span><span class="token function" >loop</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >}</span>\n          <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>TreeNode</span><span class="token punctuation" >></span></span>\n        <span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n      <span class="token keyword" >return</span> <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >key</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token punctuation" >/></span></span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >(</span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Tree</span>\n        <span class="token attr-name" >checkable</span>\n        <span class="token attr-name" >onExpand</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onExpand<span class="token punctuation" >}</span></span> <span class="token attr-name" >expandedKeys</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>expandedKeys<span class="token punctuation" >}</span></span>\n        <span class="token attr-name" >autoExpandParent</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>autoExpandParent<span class="token punctuation" >}</span></span>\n        <span class="token attr-name" >onCheck</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onCheck<span class="token punctuation" >}</span></span> <span class="token attr-name" >checkedKeys</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>checkedKeys<span class="token punctuation" >}</span></span>\n        <span class="token attr-name" >onSelect</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onSelect<span class="token punctuation" >}</span></span> <span class="token attr-name" >selectedKeys</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>selectedKeys<span class="token punctuation" >}</span></span>\n      <span class="token punctuation" >></span></span>\n        <span class="token punctuation" >{</span><span class="token function" >loop</span><span class="token punctuation" >(</span>gData<span class="token punctuation" >)</span><span class="token punctuation" >}</span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>Tree</span><span class="token punctuation" >></span></span>\n    <span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\nReactDOM<span class="token punctuation" >.</span><span class="token function" >render</span><span class="token punctuation" >(</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Demo</span> <span class="token punctuation" >/></span></span><span class="token punctuation" >,</span> mountNode<span class="token punctuation" >)</span><span class="token punctuation" >;</span>'}],preview:function(){var n=o["default"].TreeNode,a=3,s=2,t=1,p=[],e=function l(n,t,o){for(var e=t||"0",c=o||p,u=[],k=0;k<a;k++){var i=e+"-"+k;c.push({title:i,key:i}),k<s&&u.push(i)}if(n<0)return c;var r=n-1;u.forEach(function(n,a){return c[a].children=[],l(r,n,c[a].children)})};e(t);var u=c["default"].createClass({displayName:"Demo",getInitialState:function(){return{expandedKeys:["0-0-0","0-0-1"],autoExpandParent:!0,checkedKeys:["0-0-0"],selectedKeys:[]}},onExpand:function(n){console.log("onExpand",arguments),this.setState({expandedKeys:n,autoExpandParent:!1})},onCheck:function(n){this.setState({checkedKeys:n,selectedKeys:["0-3","0-4"]})},onSelect:function(n,a){console.log("onSelect",a),this.setState({selectedKeys:n})},render:function(){var a=function s(a){return a.map(function(a){return a.children?c["default"].createElement(n,{key:a.key,title:a.key,disableCheckbox:"0-0-0"===a.key},s(a.children)):c["default"].createElement(n,{key:a.key,title:a.key})})};return c["default"].createElement(o["default"],{checkable:!0,onExpand:this.onExpand,expandedKeys:this.state.expandedKeys,autoExpandParent:this.state.autoExpandParent,onCheck:this.onCheck,checkedKeys:this.state.checkedKeys,onSelect:this.onSelect,selectedKeys:this.state.selectedKeys},a(p))}});return c["default"].createElement(u,null)}}},1049:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}var p=(s(252),s(251)),o=t(p),e=s(1),c=t(e),u=s(2);t(u);n.exports={content:{"zh-CN":[["p","\u6700\u7b80\u5355\u7684\u7528\u6cd5\uff0c\u5c55\u793a\u53ef\u52fe\u9009\uff0c\u53ef\u9009\u4e2d\uff0c\u7981\u7528\uff0c\u9ed8\u8ba4\u5c55\u5f00\u7b49\u529f\u80fd\u3002"]],"en-US":[["p","The most basic usage, tell you how to use checkable, selectable, disabled, defaultExpandKeys, and etc."]]},meta:{order:0,title:{"zh-CN":"\u57fa\u672c","en-US":"basic"},filename:"components/tree/demo/basic.md",id:"components-tree-demo-basic"},toc:["ul",["li",["a",{href:"#zh-CN"},"zh-CN"]],["li",["a",{href:"#en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Tree <span class="token punctuation" >}</span> <span class="token keyword" >from</span> <span class="token string" >\'antd\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> TreeNode <span class="token operator" >=</span> Tree<span class="token punctuation" >.</span>TreeNode<span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> Demo <span class="token operator" >=</span> React<span class="token punctuation" >.</span><span class="token function" >createClass</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  <span class="token function" >getDefaultProps</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >{</span>\n      keys<span class="token punctuation" >:</span> <span class="token punctuation" >[</span><span class="token string" >\'0-0-0\'</span><span class="token punctuation" >,</span> <span class="token string" >\'0-0-1\'</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >getInitialState</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> keys <span class="token operator" >=</span> <span class="token keyword" >this</span><span class="token punctuation" >.</span>props<span class="token punctuation" >.</span>keys<span class="token punctuation" >;</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >{</span>\n      defaultExpandedKeys<span class="token punctuation" >:</span> keys<span class="token punctuation" >,</span>\n      defaultSelectedKeys<span class="token punctuation" >:</span> keys<span class="token punctuation" >,</span>\n      defaultCheckedKeys<span class="token punctuation" >:</span> keys<span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onSelect</span><span class="token punctuation" >(</span>info<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span><span class="token string" >\'selected\'</span><span class="token punctuation" >,</span> info<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onCheck</span><span class="token punctuation" >(</span>info<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span><span class="token string" >\'onCheck\'</span><span class="token punctuation" >,</span> info<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >render</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >(</span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Tree</span> <span class="token attr-name" >className</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>myCls<span class="token punctuation" >"</span></span> <span class="token attr-name" >showLine</span> <span class="token attr-name" >checkable</span>\n        <span class="token attr-name" >defaultExpandedKeys</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>defaultExpandedKeys<span class="token punctuation" >}</span></span>\n        <span class="token attr-name" >defaultSelectedKeys</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>defaultSelectedKeys<span class="token punctuation" >}</span></span>\n        <span class="token attr-name" >defaultCheckedKeys</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>defaultCheckedKeys<span class="token punctuation" >}</span></span>\n        <span class="token attr-name" >onSelect</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onSelect<span class="token punctuation" >}</span></span> <span class="token attr-name" >onCheck</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onCheck<span class="token punctuation" >}</span></span>\n      <span class="token punctuation" >></span></span>\n        <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >title</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>parent</span> <span class="token attr-name" >1"</span> <span class="token attr-name" >key</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>0-0<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n          <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >title</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>parent</span> <span class="token attr-name" >1-0"</span> <span class="token attr-name" >key</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>0-0-0<span class="token punctuation" >"</span></span> <span class="token attr-name" >disabled</span><span class="token punctuation" >></span></span>\n            <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >title</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>leaf<span class="token punctuation" >"</span></span> <span class="token attr-name" >key</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>0-0-0-0<span class="token punctuation" >"</span></span> <span class="token attr-name" >disableCheckbox</span> <span class="token punctuation" >/></span></span>\n            <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >title</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>leaf<span class="token punctuation" >"</span></span> <span class="token attr-name" >key</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>0-0-0-1<span class="token punctuation" >"</span></span> <span class="token punctuation" >/></span></span>\n          <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>TreeNode</span><span class="token punctuation" >></span></span>\n          <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >title</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>parent</span> <span class="token attr-name" >1-1"</span> <span class="token attr-name" >key</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>0-0-1<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n            <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token operator" >&lt;</span>span style<span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token punctuation" >{</span> color<span class="token punctuation" >:</span> <span class="token string" >\'#08c\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >}</span></span><span class="token punctuation" >></span></span>sss<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>span</span><span class="token punctuation" >></span></span><span class="token punctuation" >}</span> key<span class="token operator" >=</span><span class="token string" >"0-0-1-0"</span> <span class="token operator" >/</span><span class="token operator" >></span>\n          <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>TreeNode</span><span class="token punctuation" >></span></span>\n        <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>TreeNode</span><span class="token punctuation" >></span></span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>Tree</span><span class="token punctuation" >></span></span>\n    <span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\nReactDOM<span class="token punctuation" >.</span><span class="token function" >render</span><span class="token punctuation" >(</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Demo</span> <span class="token punctuation" >/></span></span><span class="token punctuation" >,</span> mountNode<span class="token punctuation" >)</span><span class="token punctuation" >;</span>'
}],preview:function(){var n=o["default"].TreeNode,a=c["default"].createClass({displayName:"Demo",getDefaultProps:function(){return{keys:["0-0-0","0-0-1"]}},getInitialState:function(){var n=this.props.keys;return{defaultExpandedKeys:n,defaultSelectedKeys:n,defaultCheckedKeys:n}},onSelect:function(n){console.log("selected",n)},onCheck:function(n){console.log("onCheck",n)},render:function(){return c["default"].createElement(o["default"],{className:"myCls",showLine:!0,checkable:!0,defaultExpandedKeys:this.state.defaultExpandedKeys,defaultSelectedKeys:this.state.defaultSelectedKeys,defaultCheckedKeys:this.state.defaultCheckedKeys,onSelect:this.onSelect,onCheck:this.onCheck},c["default"].createElement(n,{title:"parent 1",key:"0-0"},c["default"].createElement(n,{title:"parent 1-0",key:"0-0-0",disabled:!0},c["default"].createElement(n,{title:"leaf",key:"0-0-0-0",disableCheckbox:!0}),c["default"].createElement(n,{title:"leaf",key:"0-0-0-1"})),c["default"].createElement(n,{title:"parent 1-1",key:"0-0-1"},c["default"].createElement(n,{title:c["default"].createElement("span",{style:{color:"#08c"}},"sss"),key:"0-0-1-0"}))))}});return c["default"].createElement(a,null)}}},1050:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}var p=s(54),o=t(p),e=(s(252),s(251)),c=t(e),u=s(1),l=t(u),k=s(2);t(k);n.exports={content:{"zh-CN":[["p","\u5c06\u8282\u70b9\u62d6\u62fd\u5230\u5176\u4ed6\u8282\u70b9\u5185\u90e8\u6216\u524d\u540e\u3002"]],"en-US":[["p","Drag treeNode to insert after the other treeNode or insert into the other parent TreeNode."]]},meta:{order:2,title:{"zh-CN":"\u62d6\u52a8\u793a\u4f8b","en-US":"draggable"},filename:"components/tree/demo/draggable.md",id:"components-tree-demo-draggable"},toc:["ul",["li",["a",{href:"#zh-CN"},"zh-CN"]],["li",["a",{href:"#en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Tree <span class="token punctuation" >}</span> <span class="token keyword" >from</span> <span class="token string" >\'antd\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> TreeNode <span class="token operator" >=</span> Tree<span class="token punctuation" >.</span>TreeNode<span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> x <span class="token operator" >=</span> <span class="token number" >3</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> y <span class="token operator" >=</span> <span class="token number" >2</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> z <span class="token operator" >=</span> <span class="token number" >1</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> gData <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> generateData <span class="token operator" >=</span> <span class="token punctuation" >(</span>_level<span class="token punctuation" >,</span> _preKey<span class="token punctuation" >,</span> _tns<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >const</span> preKey <span class="token operator" >=</span> _preKey <span class="token operator" >||</span> <span class="token string" >\'0\'</span><span class="token punctuation" >;</span>\n  <span class="token keyword" >const</span> tns <span class="token operator" >=</span> _tns <span class="token operator" >||</span> gData<span class="token punctuation" >;</span>\n\n  <span class="token keyword" >const</span> children <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n  <span class="token keyword" >for</span> <span class="token punctuation" >(</span><span class="token keyword" >let</span> i <span class="token operator" >=</span> <span class="token number" >0</span><span class="token punctuation" >;</span> i <span class="token operator" >&lt;</span> x<span class="token punctuation" >;</span> i<span class="token operator" >++</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> key <span class="token operator" >=</span> <span class="token template-string" ><span class="token string" >`</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>preKey<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >-</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>i<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n    tns<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> title<span class="token punctuation" >:</span> key<span class="token punctuation" >,</span> key <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >if</span> <span class="token punctuation" >(</span>i <span class="token operator" >&lt;</span> y<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n      children<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span>key<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span>\n  <span class="token punctuation" >}</span>\n  <span class="token keyword" >if</span> <span class="token punctuation" >(</span>_level <span class="token operator" >&lt;</span> <span class="token number" >0</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> tns<span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n  <span class="token keyword" >const</span> level <span class="token operator" >=</span> _level <span class="token operator" >-</span> <span class="token number" >1</span><span class="token punctuation" >;</span>\n  children<span class="token punctuation" >.</span><span class="token function" >forEach</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>key<span class="token punctuation" >,</span> index<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n    tns<span class="token punctuation" >[</span>index<span class="token punctuation" >]</span><span class="token punctuation" >.</span>children <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >return</span> <span class="token function" >generateData</span><span class="token punctuation" >(</span>level<span class="token punctuation" >,</span> key<span class="token punctuation" >,</span> tns<span class="token punctuation" >[</span>index<span class="token punctuation" >]</span><span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n<span class="token function" >generateData</span><span class="token punctuation" >(</span>z<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> Demo <span class="token operator" >=</span> React<span class="token punctuation" >.</span><span class="token function" >createClass</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  <span class="token function" >getInitialState</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >{</span>\n      gData<span class="token punctuation" >,</span>\n      expandedKeys<span class="token punctuation" >:</span> <span class="token punctuation" >[</span><span class="token string" >\'0-0\'</span><span class="token punctuation" >,</span> <span class="token string" >\'0-0-0\'</span><span class="token punctuation" >,</span> <span class="token string" >\'0-0-0-0\'</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onDragEnter</span><span class="token punctuation" >(</span>info<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span>info<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token comment" spellcheck="true">// expandedKeys \u9700\u8981\u53d7\u63a7\u65f6\u8bbe\u7f6e</span>\n    <span class="token comment" spellcheck="true">// this.setState({</span>\n    <span class="token comment" spellcheck="true">//   expandedKeys: info.expandedKeys,</span>\n    <span class="token comment" spellcheck="true">// });</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onDrop</span><span class="token punctuation" >(</span>info<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span>info<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >const</span> dropKey <span class="token operator" >=</span> info<span class="token punctuation" >.</span>node<span class="token punctuation" >.</span>props<span class="token punctuation" >.</span>eventKey<span class="token punctuation" >;</span>\n    <span class="token keyword" >const</span> dragKey <span class="token operator" >=</span> info<span class="token punctuation" >.</span>dragNode<span class="token punctuation" >.</span>props<span class="token punctuation" >.</span>eventKey<span class="token punctuation" >;</span>\n    <span class="token comment" spellcheck="true">// const dragNodesKeys = info.dragNodesKeys;</span>\n    <span class="token keyword" >const</span> loop <span class="token operator" >=</span> <span class="token punctuation" >(</span>data<span class="token punctuation" >,</span> key<span class="token punctuation" >,</span> callback<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      data<span class="token punctuation" >.</span><span class="token function" >forEach</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >,</span> index<span class="token punctuation" >,</span> arr<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>key <span class="token operator" >===</span> key<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n          <span class="token keyword" >return</span> <span class="token function" >callback</span><span class="token punctuation" >(</span>item<span class="token punctuation" >,</span> index<span class="token punctuation" >,</span> arr<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n        <span class="token punctuation" >}</span>\n        <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n          <span class="token keyword" >return</span> <span class="token function" >loop</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >,</span> key<span class="token punctuation" >,</span> callback<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n        <span class="token punctuation" >}</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >const</span> data <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >.</span><span class="token punctuation" >.</span><span class="token punctuation" >.</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>gData<span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >let</span> dragObj<span class="token punctuation" >;</span>\n    <span class="token function" >loop</span><span class="token punctuation" >(</span>data<span class="token punctuation" >,</span> dragKey<span class="token punctuation" >,</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >,</span> index<span class="token punctuation" >,</span> arr<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      arr<span class="token punctuation" >.</span><span class="token function" >splice</span><span class="token punctuation" >(</span>index<span class="token punctuation" >,</span> <span class="token number" >1</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      dragObj <span class="token operator" >=</span> item<span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >if</span> <span class="token punctuation" >(</span>info<span class="token punctuation" >.</span>dropToGap<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >let</span> ar<span class="token punctuation" >;</span>\n      <span class="token keyword" >let</span> i<span class="token punctuation" >;</span>\n      <span class="token function" >loop</span><span class="token punctuation" >(</span>data<span class="token punctuation" >,</span> dropKey<span class="token punctuation" >,</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >,</span> index<span class="token punctuation" >,</span> arr<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n        ar <span class="token operator" >=</span> arr<span class="token punctuation" >;</span>\n        i <span class="token operator" >=</span> index<span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      ar<span class="token punctuation" >.</span><span class="token function" >splice</span><span class="token punctuation" >(</span>i<span class="token punctuation" >,</span> <span class="token number" >0</span><span class="token punctuation" >,</span> dragObj<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span> <span class="token keyword" >else</span> <span class="token punctuation" >{</span>\n      <span class="token function" >loop</span><span class="token punctuation" >(</span>data<span class="token punctuation" >,</span> dropKey<span class="token punctuation" >,</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n        item<span class="token punctuation" >.</span>children <span class="token operator" >=</span> item<span class="token punctuation" >.</span>children <span class="token operator" >||</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n        <span class="token comment" spellcheck="true">// where to insert \u793a\u4f8b\u6dfb\u52a0\u5230\u5c3e\u90e8\uff0c\u53ef\u4ee5\u662f\u968f\u610f\u4f4d\u7f6e</span>\n        item<span class="token punctuation" >.</span>children<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span>dragObj<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span>\n    <span class="token keyword" >this</span><span class="token punctuation" >.</span><span class="token function" >setState</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n      gData<span class="token punctuation" >:</span> data<span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >render</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> loop <span class="token operator" >=</span> data <span class="token operator" >=</span><span class="token operator" >></span> data<span class="token punctuation" >.</span><span class="token function" >map</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children <span class="token operator" >&amp;&amp;</span> item<span class="token punctuation" >.</span>children<span class="token punctuation" >.</span>length<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >return</span> <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >key</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span><span class="token punctuation" >></span></span><span class="token punctuation" >{</span><span class="token function" >loop</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >}</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>TreeNode</span><span class="token punctuation" >></span></span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n      <span class="token keyword" >return</span> <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >key</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token punctuation" >/></span></span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >(</span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Tree</span>\n        <span class="token attr-name" >defaultExpandedKeys</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>expandedKeys<span class="token punctuation" >}</span></span>\n        <span class="token attr-name" >draggable</span>\n        <span class="token attr-name" >onDragEnter</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onDragEnter<span class="token punctuation" >}</span></span>\n        <span class="token attr-name" >onDrop</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onDrop<span class="token punctuation" >}</span></span>\n      <span class="token punctuation" >></span></span>\n        <span class="token punctuation" >{</span><span class="token function" >loop</span><span class="token punctuation" >(</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>gData<span class="token punctuation" >)</span><span class="token punctuation" >}</span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>Tree</span><span class="token punctuation" >></span></span>\n    <span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\nReactDOM<span class="token punctuation" >.</span><span class="token function" >render</span><span class="token punctuation" >(</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Demo</span> <span class="token punctuation" >/></span></span><span class="token punctuation" >,</span> mountNode<span class="token punctuation" >)</span><span class="token punctuation" >;</span>'}],preview:function(){var n=c["default"].TreeNode,a=3,s=2,t=1,p=[],e=function k(n,t,o){for(var e=t||"0",c=o||p,u=[],l=0;l<a;l++){var i=e+"-"+l;c.push({title:i,key:i}),l<s&&u.push(i)}if(n<0)return c;var r=n-1;u.forEach(function(n,a){return c[a].children=[],k(r,n,c[a].children)})};e(t);var u=l["default"].createClass({displayName:"Demo",getInitialState:function(){return{gData:p,expandedKeys:["0-0","0-0-0","0-0-0-0"]}},onDragEnter:function(n){console.log(n)},onDrop:function(n){console.log(n);var a=n.node.props.eventKey,s=n.dragNode.props.eventKey,t=function l(n,a,s){n.forEach(function(n,t,p){return n.key===a?s(n,t,p):n.children?l(n.children,a,s):void 0})},p=[].concat((0,o["default"])(this.state.gData)),e=void 0;if(t(p,s,function(n,a,s){s.splice(a,1),e=n}),n.dropToGap){var c=void 0,u=void 0;t(p,a,function(n,a,s){c=s,u=a}),c.splice(u,0,e)}else t(p,a,function(n){n.children=n.children||[],n.children.push(e)});this.setState({gData:p})},render:function(){var a=function s(a){return a.map(function(a){return a.children&&a.children.length?l["default"].createElement(n,{key:a.key,title:a.key},s(a.children)):l["default"].createElement(n,{key:a.key,title:a.key})})};return l["default"].createElement(c["default"],{defaultExpandedKeys:this.state.expandedKeys,draggable:!0,onDragEnter:this.onDragEnter,onDrop:this.onDrop},a(this.state.gData))}});return l["default"].createElement(u,null)}}},1051:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}var p=s(54),o=t(p),e=(s(252),s(251)),c=t(e),u=s(1),l=t(u),k=s(2);t(k);n.exports={content:{"zh-CN":[["p","\u70b9\u51fb\u5c55\u5f00\u8282\u70b9\uff0c\u52a8\u6001\u52a0\u8f7d\u6570\u636e\u3002"]],"en-US":[["p","To load data asynchronously when click to expand a treeNode."]]},meta:{order:3,title:{"zh-CN":"\u5f02\u6b65\u6570\u636e\u52a0\u8f7d","en-US":"load data asynchronously"},filename:"components/tree/demo/dynamic.md",id:"components-tree-demo-dynamic"},toc:["ul",["li",["a",{href:"#zh-CN"},"zh-CN"]],["li",["a",{href:"#en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Tree <span class="token punctuation" >}</span> <span class="token keyword" >from</span> <span class="token string" >\'antd\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> TreeNode <span class="token operator" >=</span> Tree<span class="token punctuation" >.</span>TreeNode<span class="token punctuation" >;</span>\n\n<span class="token keyword" >function</span> <span class="token function" >generateTreeNodes</span><span class="token punctuation" >(</span>treeNode<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >const</span> arr <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n  <span class="token keyword" >const</span> key <span class="token operator" >=</span> treeNode<span class="token punctuation" >.</span>props<span class="token punctuation" >.</span>eventKey<span class="token punctuation" >;</span>\n  <span class="token keyword" >for</span> <span class="token punctuation" >(</span><span class="token keyword" >let</span> i <span class="token operator" >=</span> <span class="token number" >0</span><span class="token punctuation" >;</span> i <span class="token operator" >&lt;</span> <span class="token number" >3</span><span class="token punctuation" >;</span> i<span class="token operator" >++</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    arr<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token template-string" ><span class="token string" >`leaf </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>key<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >-</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>i<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >,</span> key<span class="token punctuation" >:</span> <span class="token template-string" ><span class="token string" >`</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>key<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >-</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>i<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n  <span class="token keyword" >return</span> arr<span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >function</span> <span class="token function" >setLeaf</span><span class="token punctuation" >(</span>treeData<span class="token punctuation" >,</span> curKey<span class="token punctuation" >,</span> level<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >const</span> loopLeaf <span class="token operator" >=</span> <span class="token punctuation" >(</span>data<span class="token punctuation" >,</span> lev<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> l <span class="token operator" >=</span> lev <span class="token operator" >-</span> <span class="token number" >1</span><span class="token punctuation" >;</span>\n    data<span class="token punctuation" >.</span><span class="token function" >forEach</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >.</span>length <span class="token operator" >></span> curKey<span class="token punctuation" >.</span>length<span class="token punctuation" >)</span> <span class="token operator" >?</span> item<span class="token punctuation" >.</span>key<span class="token punctuation" >.</span><span class="token function" >indexOf</span><span class="token punctuation" >(</span>curKey<span class="token punctuation" >)</span> <span class="token operator" >!==</span> <span class="token number" >0</span> <span class="token punctuation" >:</span>\n        curKey<span class="token punctuation" >.</span><span class="token function" >indexOf</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >)</span> <span class="token operator" >!==</span> <span class="token number" >0</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >return</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        <span class="token function" >loopLeaf</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >,</span> l<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span> <span class="token keyword" >else</span> <span class="token keyword" >if</span> <span class="token punctuation" >(</span>l <span class="token operator" >&lt;</span> <span class="token number" >1</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        item<span class="token punctuation" >.</span>isLeaf <span class="token operator" >=</span> <span class="token boolean" >true</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  <span class="token function" >loopLeaf</span><span class="token punctuation" >(</span>treeData<span class="token punctuation" >,</span> level <span class="token operator" >+</span> <span class="token number" >1</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >function</span> <span class="token function" >getNewTreeData</span><span class="token punctuation" >(</span>treeData<span class="token punctuation" >,</span> curKey<span class="token punctuation" >,</span> child<span class="token punctuation" >,</span> level<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >const</span> loop <span class="token operator" >=</span> <span class="token punctuation" >(</span>data<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >if</span> <span class="token punctuation" >(</span>level <span class="token operator" >&lt;</span> <span class="token number" >1</span> <span class="token operator" >||</span> curKey<span class="token punctuation" >.</span>length <span class="token operator" >-</span> <span class="token number" >3</span> <span class="token operator" >></span> level <span class="token operator" >*</span> <span class="token number" >2</span><span class="token punctuation" >)</span> <span class="token keyword" >return</span><span class="token punctuation" >;</span>\n    data<span class="token punctuation" >.</span><span class="token function" >forEach</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>curKey<span class="token punctuation" >.</span><span class="token function" >indexOf</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >)</span> <span class="token operator" >===</span> <span class="token number" >0</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n          <span class="token function" >loop</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n        <span class="token punctuation" >}</span> <span class="token keyword" >else</span> <span class="token punctuation" >{</span>\n          item<span class="token punctuation" >.</span>children <span class="token operator" >=</span> child<span class="token punctuation" >;</span>\n        <span class="token punctuation" >}</span>\n      <span class="token punctuation" >}</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  <span class="token function" >loop</span><span class="token punctuation" >(</span>treeData<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token function" >setLeaf</span><span class="token punctuation" >(</span>treeData<span class="token punctuation" >,</span> curKey<span class="token punctuation" >,</span> level<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >const</span> Demo <span class="token operator" >=</span> React<span class="token punctuation" >.</span><span class="token function" >createClass</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  <span class="token function" >getInitialState</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >{</span>\n      treeData<span class="token punctuation" >:</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >componentDidMount</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token function" >setTimeout</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >this</span><span class="token punctuation" >.</span><span class="token function" >setState</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n        treeData<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n          <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'pNode 01\'</span><span class="token punctuation" >,</span> key<span class="token punctuation" >:</span> <span class="token string" >\'0-0\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'pNode 02\'</span><span class="token punctuation" >,</span> key<span class="token punctuation" >:</span> <span class="token string" >\'0-1\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'pNode 03\'</span><span class="token punctuation" >,</span> key<span class="token punctuation" >:</span> <span class="token string" >\'0-2\'</span><span class="token punctuation" >,</span> isLeaf<span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span> <span class="token number" >100</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onSelect</span><span class="token punctuation" >(</span>info<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span><span class="token string" >\'selected\'</span><span class="token punctuation" >,</span> info<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >onLoadData</span><span class="token punctuation" >(</span>treeNode<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> <span class="token keyword" >new</span> <span class="token class-name" >Promise</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>resolve<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token function" >setTimeout</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >const</span> treeData <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >.</span><span class="token punctuation" >.</span><span class="token punctuation" >.</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>treeData<span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n        <span class="token function" >getNewTreeData</span><span class="token punctuation" >(</span>treeData<span class="token punctuation" >,</span> treeNode<span class="token punctuation" >.</span>props<span class="token punctuation" >.</span>eventKey<span class="token punctuation" >,</span> <span class="token function" >generateTreeNodes</span><span class="token punctuation" >(</span>treeNode<span class="token punctuation" >)</span><span class="token punctuation" >,</span> <span class="token number" >2</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n        <span class="token keyword" >this</span><span class="token punctuation" >.</span><span class="token function" >setState</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> treeData <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n        <span class="token function" >resolve</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span> <span class="token number" >1000</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token function" >render</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> loop <span class="token operator" >=</span> data <span class="token operator" >=</span><span class="token operator" >></span> data<span class="token punctuation" >.</span><span class="token function" >map</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >return</span> <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>name<span class="token punctuation" >}</span></span> <span class="token attr-name" >key</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span><span class="token punctuation" >></span></span><span class="token punctuation" >{</span><span class="token function" >loop</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >}</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>TreeNode</span><span class="token punctuation" >></span></span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n      <span class="token keyword" >return</span> <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>name<span class="token punctuation" >}</span></span> <span class="token attr-name" >key</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token attr-name" >isLeaf</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>isLeaf<span class="token punctuation" >}</span></span> <span class="token attr-name" >disabled</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key <span class="token operator" >===</span> <span class="token string" >\'0-0-0\'</span><span class="token punctuation" >}</span></span> <span class="token punctuation" >/></span></span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >const</span> treeNodes <span class="token operator" >=</span> <span class="token function" >loop</span><span class="token punctuation" >(</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >.</span>treeData<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >(</span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Tree</span> <span class="token attr-name" >onSelect</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onSelect<span class="token punctuation" >}</span></span> <span class="token attr-name" >loadData</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onLoadData<span class="token punctuation" >}</span></span><span class="token punctuation" >></span></span>\n        <span class="token punctuation" >{</span>treeNodes<span class="token punctuation" >}</span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>Tree</span><span class="token punctuation" >></span></span>\n    <span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\nReactDOM<span class="token punctuation" >.</span><span class="token function" >render</span><span class="token punctuation" >(</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Demo</span> <span class="token punctuation" >/></span></span><span class="token punctuation" >,</span> mountNode<span class="token punctuation" >)</span><span class="token punctuation" >;</span>'
}],preview:function(){function n(n){for(var a=[],s=n.props.eventKey,t=0;t<3;t++)a.push({name:"leaf "+s+"-"+t,key:s+"-"+t});return a}function a(n,a,s){var t=function p(n,s){var t=s-1;n.forEach(function(n){(n.key.length>a.length?0===n.key.indexOf(a):0===a.indexOf(n.key))&&(n.children?p(n.children,t):t<1&&(n.isLeaf=!0))})};t(n,s+1)}function s(n,s,t,p){var o=function e(n){p<1||s.length-3>2*p||n.forEach(function(n){0===s.indexOf(n.key)&&(n.children?e(n.children):n.children=t)})};o(n),a(n,s,p)}var t=c["default"].TreeNode,p=l["default"].createClass({displayName:"Demo",getInitialState:function(){return{treeData:[]}},componentDidMount:function(){var n=this;setTimeout(function(){n.setState({treeData:[{name:"pNode 01",key:"0-0"},{name:"pNode 02",key:"0-1"},{name:"pNode 03",key:"0-2",isLeaf:!0}]})},100)},onSelect:function(n){console.log("selected",n)},onLoadData:function(a){var t=this;return new Promise(function(p){setTimeout(function(){var e=[].concat((0,o["default"])(t.state.treeData));s(e,a.props.eventKey,n(a),2),t.setState({treeData:e}),p()},1e3)})},render:function(){var n=function s(n){return n.map(function(n){return n.children?l["default"].createElement(t,{title:n.name,key:n.key},s(n.children)):l["default"].createElement(t,{title:n.name,key:n.key,isLeaf:n.isLeaf,disabled:"0-0-0"===n.key})})},a=n(this.state.treeData);return l["default"].createElement(c["default"],{onSelect:this.onSelect,loadData:this.onLoadData},a)}});return l["default"].createElement(p,null)}}},1052:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}var p=(s(22),s(27)),o=t(p),e=s(3),c=t(e),u=s(5),l=t(u),k=s(4),i=t(k),r=(s(252),s(251)),d=t(r),y=s(1),f=t(y),g=s(2);t(g);n.exports={content:{"zh-CN":[["p","\u53ef\u641c\u7d22\u7684\u6811\u3002"]],"en-US":[["p","Searchable Tree."]]},meta:{order:4,title:{"zh-CN":"\u53ef\u641c\u7d22","en-US":"Searchable"},filename:"components/tree/demo/search.md",id:"components-tree-demo-search"},toc:["ul",["li",["a",{href:"#zh-CN"},"zh-CN"]],["li",["a",{href:"#en-US"},"en-US"]]],highlightedCode:["pre",{lang:"jsx",highlighted:'<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Tree<span class="token punctuation" >,</span> Input <span class="token punctuation" >}</span> <span class="token keyword" >from</span> <span class="token string" >\'antd\'</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> TreeNode <span class="token operator" >=</span> Tree<span class="token punctuation" >.</span>TreeNode<span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> x <span class="token operator" >=</span> <span class="token number" >3</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> y <span class="token operator" >=</span> <span class="token number" >2</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> z <span class="token operator" >=</span> <span class="token number" >1</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> gData <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> generateData <span class="token operator" >=</span> <span class="token punctuation" >(</span>_level<span class="token punctuation" >,</span> _preKey<span class="token punctuation" >,</span> _tns<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >const</span> preKey <span class="token operator" >=</span> _preKey <span class="token operator" >||</span> <span class="token string" >\'0\'</span><span class="token punctuation" >;</span>\n  <span class="token keyword" >const</span> tns <span class="token operator" >=</span> _tns <span class="token operator" >||</span> gData<span class="token punctuation" >;</span>\n\n  <span class="token keyword" >const</span> children <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n  <span class="token keyword" >for</span> <span class="token punctuation" >(</span><span class="token keyword" >let</span> i <span class="token operator" >=</span> <span class="token number" >0</span><span class="token punctuation" >;</span> i <span class="token operator" >&lt;</span> x<span class="token punctuation" >;</span> i<span class="token operator" >++</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> key <span class="token operator" >=</span> <span class="token template-string" ><span class="token string" >`</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>preKey<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >-</span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>i<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n    tns<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> title<span class="token punctuation" >:</span> key<span class="token punctuation" >,</span> key <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >if</span> <span class="token punctuation" >(</span>i <span class="token operator" >&lt;</span> y<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n      children<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span>key<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span>\n  <span class="token punctuation" >}</span>\n  <span class="token keyword" >if</span> <span class="token punctuation" >(</span>_level <span class="token operator" >&lt;</span> <span class="token number" >0</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >return</span> tns<span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n  <span class="token keyword" >const</span> level <span class="token operator" >=</span> _level <span class="token operator" >-</span> <span class="token number" >1</span><span class="token punctuation" >;</span>\n  children<span class="token punctuation" >.</span><span class="token function" >forEach</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>key<span class="token punctuation" >,</span> index<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n    tns<span class="token punctuation" >[</span>index<span class="token punctuation" >]</span><span class="token punctuation" >.</span>children <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >return</span> <span class="token function" >generateData</span><span class="token punctuation" >(</span>level<span class="token punctuation" >,</span> key<span class="token punctuation" >,</span> tns<span class="token punctuation" >[</span>index<span class="token punctuation" >]</span><span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n<span class="token function" >generateData</span><span class="token punctuation" >(</span>z<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> dataList <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n<span class="token keyword" >const</span> generateList <span class="token operator" >=</span> <span class="token punctuation" >(</span>data<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >for</span> <span class="token punctuation" >(</span><span class="token keyword" >let</span> i <span class="token operator" >=</span> <span class="token number" >0</span><span class="token punctuation" >;</span> i <span class="token operator" >&lt;</span> data<span class="token punctuation" >.</span>length<span class="token punctuation" >;</span> i<span class="token operator" >++</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> node <span class="token operator" >=</span> data<span class="token punctuation" >[</span>i<span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >const</span> key <span class="token operator" >=</span> node<span class="token punctuation" >.</span>key<span class="token punctuation" >;</span>\n    dataList<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> key<span class="token punctuation" >,</span> title<span class="token punctuation" >:</span> key <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >if</span> <span class="token punctuation" >(</span>node<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n      <span class="token function" >generateList</span><span class="token punctuation" >(</span>node<span class="token punctuation" >.</span>children<span class="token punctuation" >,</span> node<span class="token punctuation" >.</span>key<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n<span class="token function" >generateList</span><span class="token punctuation" >(</span>gData<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >const</span> getParentKey <span class="token operator" >=</span> <span class="token punctuation" >(</span>key<span class="token punctuation" >,</span> tree<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >let</span> parentKey<span class="token punctuation" >;</span>\n  <span class="token keyword" >for</span> <span class="token punctuation" >(</span><span class="token keyword" >let</span> i <span class="token operator" >=</span> <span class="token number" >0</span><span class="token punctuation" >;</span> i <span class="token operator" >&lt;</span> tree<span class="token punctuation" >.</span>length<span class="token punctuation" >;</span> i<span class="token operator" >++</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> node <span class="token operator" >=</span> tree<span class="token punctuation" >[</span>i<span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >if</span> <span class="token punctuation" >(</span>node<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>node<span class="token punctuation" >.</span>children<span class="token punctuation" >.</span><span class="token function" >some</span><span class="token punctuation" >(</span>item <span class="token operator" >=</span><span class="token operator" >></span> item<span class="token punctuation" >.</span>key <span class="token operator" >===</span> key<span class="token punctuation" >)</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        parentKey <span class="token operator" >=</span> node<span class="token punctuation" >.</span>key<span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span> <span class="token keyword" >else</span> <span class="token keyword" >if</span> <span class="token punctuation" >(</span><span class="token function" >getParentKey</span><span class="token punctuation" >(</span>key<span class="token punctuation" >,</span> node<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        parentKey <span class="token operator" >=</span> <span class="token function" >getParentKey</span><span class="token punctuation" >(</span>key<span class="token punctuation" >,</span> node<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n    <span class="token punctuation" >}</span>\n  <span class="token punctuation" >}</span>\n  <span class="token keyword" >return</span> parentKey<span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n\n\n<span class="token keyword" >class</span> <span class="token class-name" >SearchTree</span> <span class="token keyword" >extends</span> <span class="token class-name" >React<span class="token punctuation" >.</span>Component</span> <span class="token punctuation" >{</span>\n  <span class="token function" >constructor</span><span class="token punctuation" >(</span>props<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >super</span><span class="token punctuation" >(</span>props<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >this</span><span class="token punctuation" >.</span>state <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n      expandedKeys<span class="token punctuation" >:</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      searchValue<span class="token punctuation" >:</span> <span class="token string" >\'\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n  onExpand <span class="token operator" >=</span> <span class="token punctuation" >(</span>expandedKeys<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >this</span><span class="token punctuation" >.</span><span class="token function" >setState</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> expandedKeys <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n  onChange <span class="token operator" >=</span> <span class="token punctuation" >(</span>e<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> value <span class="token operator" >=</span> e<span class="token punctuation" >.</span>target<span class="token punctuation" >.</span>value<span class="token punctuation" >;</span>\n    <span class="token keyword" >const</span> expandedKeys <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n    dataList<span class="token punctuation" >.</span><span class="token function" >forEach</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >.</span><span class="token function" >indexOf</span><span class="token punctuation" >(</span>value<span class="token punctuation" >)</span> <span class="token operator" >></span> <span class="token operator" >-</span><span class="token number" >1</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        expandedKeys<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span><span class="token function" >getParentKey</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >,</span> gData<span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >const</span> uniqueExpandedKeys <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n    expandedKeys<span class="token punctuation" >.</span><span class="token function" >forEach</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item <span class="token operator" >&amp;&amp;</span> uniqueExpandedKeys<span class="token punctuation" >.</span><span class="token function" >indexOf</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >===</span> <span class="token operator" >-</span><span class="token number" >1</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        uniqueExpandedKeys<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >this</span><span class="token punctuation" >.</span><span class="token function" >setState</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n      expandedKeys<span class="token punctuation" >:</span> uniqueExpandedKeys<span class="token punctuation" >,</span>\n      searchValue<span class="token punctuation" >:</span> value<span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n  <span class="token function" >render</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> <span class="token punctuation" >{</span> searchValue<span class="token punctuation" >,</span> expandedKeys <span class="token punctuation" >}</span> <span class="token operator" >=</span> <span class="token keyword" >this</span><span class="token punctuation" >.</span>state<span class="token punctuation" >;</span>\n    <span class="token keyword" >const</span> loop <span class="token operator" >=</span> data <span class="token operator" >=</span><span class="token operator" >></span> data<span class="token punctuation" >.</span><span class="token function" >map</span><span class="token punctuation" >(</span><span class="token punctuation" >(</span>item<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token punctuation" >{</span>\n      <span class="token keyword" >const</span> index <span class="token operator" >=</span> item<span class="token punctuation" >.</span>key<span class="token punctuation" >.</span><span class="token function" >search</span><span class="token punctuation" >(</span>searchValue<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token keyword" >const</span> beforeStr <span class="token operator" >=</span> item<span class="token punctuation" >.</span>key<span class="token punctuation" >.</span><span class="token function" >substr</span><span class="token punctuation" >(</span><span class="token number" >0</span><span class="token punctuation" >,</span> index<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token keyword" >const</span> afterStr <span class="token operator" >=</span> item<span class="token punctuation" >.</span>key<span class="token punctuation" >.</span><span class="token function" >substr</span><span class="token punctuation" >(</span>index <span class="token operator" >+</span> searchValue<span class="token punctuation" >.</span>length<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token keyword" >const</span> title <span class="token operator" >=</span> index <span class="token operator" >></span> <span class="token operator" >-</span><span class="token number" >1</span> <span class="token operator" >?</span>\n            <span class="token punctuation" >(</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>span</span><span class="token punctuation" >></span></span>\n              <span class="token punctuation" >{</span>beforeStr<span class="token punctuation" >}</span>\n              <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>span</span> <span class="token attr-name" >className</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>ant-tree-searchable-filter<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span><span class="token punctuation" >{</span>searchValue<span class="token punctuation" >}</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>span</span><span class="token punctuation" >></span></span>\n              <span class="token punctuation" >{</span>afterStr<span class="token punctuation" >}</span>\n            <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>span</span><span class="token punctuation" >></span></span><span class="token punctuation" >)</span>\n            <span class="token punctuation" >:</span> <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>span</span><span class="token punctuation" >></span></span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>span</span><span class="token punctuation" >></span></span><span class="token punctuation" >;</span>\n      <span class="token keyword" >if</span> <span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >return</span> <span class="token punctuation" >(</span>\n          <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >key</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>title<span class="token punctuation" >}</span></span><span class="token punctuation" >></span></span>\n            <span class="token punctuation" >{</span><span class="token function" >loop</span><span class="token punctuation" >(</span>item<span class="token punctuation" >.</span>children<span class="token punctuation" >)</span><span class="token punctuation" >}</span>\n          <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>TreeNode</span><span class="token punctuation" >></span></span>\n        <span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n      <span class="token punctuation" >}</span>\n      <span class="token keyword" >return</span> <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>TreeNode</span> <span class="token attr-name" >key</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>item<span class="token punctuation" >.</span>key<span class="token punctuation" >}</span></span> <span class="token attr-name" >title</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>title<span class="token punctuation" >}</span></span> <span class="token punctuation" >/></span></span><span class="token punctuation" >;</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n    <span class="token keyword" >return</span> <span class="token punctuation" >(</span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>div</span><span class="token punctuation" >></span></span>\n        <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Input</span>\n          <span class="token attr-name" >style</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token punctuation" >{</span> width<span class="token punctuation" >:</span> <span class="token number" >200</span> <span class="token punctuation" >}</span><span class="token punctuation" >}</span></span>\n          <span class="token attr-name" >placeholder</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>Search<span class="token punctuation" >"</span></span>\n          <span class="token attr-name" >onChange</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onChange<span class="token punctuation" >}</span></span>\n        <span class="token punctuation" >/></span></span>\n        <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Tree</span>\n          <span class="token attr-name" >onExpand</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>onExpand<span class="token punctuation" >}</span></span>\n          <span class="token attr-name" >expandedKeys</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>expandedKeys<span class="token punctuation" >}</span></span>\n        <span class="token punctuation" >></span></span>\n          <span class="token punctuation" >{</span><span class="token function" >loop</span><span class="token punctuation" >(</span>gData<span class="token punctuation" >)</span><span class="token punctuation" >}</span>\n        <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>Tree</span><span class="token punctuation" >></span></span>\n      <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>div</span><span class="token punctuation" >></span></span>\n    <span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n\nReactDOM<span class="token punctuation" >.</span><span class="token function" >render</span><span class="token punctuation" >(</span><span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>SearchTree</span> <span class="token punctuation" >/></span></span><span class="token punctuation" >,</span> mountNode<span class="token punctuation" >)</span><span class="token punctuation" >;</span>'}],preview:function(){var n=d["default"].TreeNode,a=3,s=2,t=1,p=[],e=function g(n,t,o){for(var e=t||"0",c=o||p,u=[],l=0;l<a;l++){var k=e+"-"+l;c.push({title:k,key:k}),l<s&&u.push(k)}if(n<0)return c;var i=n-1;u.forEach(function(n,a){return c[a].children=[],g(i,n,c[a].children)})};e(t);var u=[],k=function h(n){for(var a=0;a<n.length;a++){var s=n[a],t=s.key;u.push({key:t,title:t}),s.children&&h(s.children,s.key)}};k(p);var r=function m(n,a){for(var s=void 0,t=0;t<a.length;t++){var p=a[t];p.children&&(p.children.some(function(a){return a.key===n})?s=p.key:m(n,p.children)&&(s=m(n,p.children)))}return s},y=function(a){function s(n){(0,c["default"])(this,s);var t=(0,l["default"])(this,a.call(this,n));return t.onExpand=function(n){t.setState({expandedKeys:n})},t.onChange=function(n){var a=n.target.value,s=[];u.forEach(function(n){n.key.indexOf(a)>-1&&s.push(r(n.key,p))});var o=[];s.forEach(function(n){n&&o.indexOf(n)===-1&&o.push(n)}),t.setState({expandedKeys:o,searchValue:a})},t.state={expandedKeys:[],searchValue:""},t}return(0,i["default"])(s,a),s.prototype.render=function(){var a=this.state,s=a.searchValue,t=a.expandedKeys,e=function c(a){return a.map(function(a){var t=a.key.search(s),p=a.key.substr(0,t),o=a.key.substr(t+s.length),e=t>-1?f["default"].createElement("span",null,p,f["default"].createElement("span",{
className:"ant-tree-searchable-filter"},s),o):f["default"].createElement("span",null,a.key);return a.children?f["default"].createElement(n,{key:a.key,title:e},c(a.children)):f["default"].createElement(n,{key:a.key,title:e})})};return f["default"].createElement("div",null,f["default"].createElement(o["default"],{style:{width:200},placeholder:"Search",onChange:this.onChange}),f["default"].createElement(d["default"],{onExpand:this.onExpand,expandedKeys:t},e(p)))},s}(f["default"].Component);return f["default"].createElement(y,null)},style:".ant-tree-searchable-filter {\n  color: #f50;\n  transition: all .3s ease;\n}",highlightedStyle:'<span class="token selector" ><span class="token class" >.ant-tree-searchable-filter</span> </span><span class="token punctuation" >{</span>\n  <span class="token property" >color</span><span class="token punctuation" >:</span> <span class="token hexcode" >#f50</span><span class="token punctuation" >;</span>\n  <span class="token property" >transition</span><span class="token punctuation" >:</span> all <span class="token number" >.3</span>s ease<span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>'}},1278:function(n,a,s){n.exports={"basic-controlled":s(1048),basic:s(1049),draggable:s(1050),dynamic:s(1051),search:s(1052)}},1607:function(n,a){}});